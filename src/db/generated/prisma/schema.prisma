// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users of the platform
model User {
  id               String   @id @default(uuid())
  username         String   @unique
  email            String   @unique
  passwordHash     String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  walletAddress    String?  @unique // blockchain wallet address
  codexCoinBalance Float    @default(0) // User's platform token balance

  // Relations
  createdQuestions Question[]    @relation("CreatedQuestions")
  submissions      Submission[]
  transactions     Transaction[]

  @@map("users")
}

// Questions created by users
model Question {
  id              String         @id @default(uuid())
  title           String
  content         String         @db.Text
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  status          QuestionStatus @default(PENDING)
  difficulty      Difficulty     @default(MEDIUM)
  tags            String[] // Array of question tags
  aiValidated     Boolean        @default(false) // Whether the question has been validated by AI
  aiValidationLog String?        @db.Text // Feedback from AI validation

  // Reward settings
  baseReward               Float // Initial reward amount
  rewardPool               Float @default(0) // Total staked amount + base reward
  questionSetterPercentage Float @default(10) // Percentage of reward for question creator
  platformFeePercentage    Float @default(5) // Platform fee percentage

  // Time settings
  expiresAt DateTime? // Optional deadline

  // Relations
  creatorId    String
  creator      User          @relation("CreatedQuestions", fields: [creatorId], references: [id])
  submissions  Submission[]
  transactions Transaction[] @relation("QuestionTransactions")

  @@map("questions")
}

enum QuestionStatus {
  PENDING // Waiting for AI validation
  ACTIVE // Open for submissions
  CLOSED // No longer accepting submissions
  COMPLETED // Solutions validated and rewards distributed
  REJECTED // Invalid question
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

// User submissions for questions
model Submission {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Validation fields
  isCorrect Boolean? // Null means not yet validated
  score     Float? // Score assigned by AI (optional)
  feedback  String?  @db.Text // AI feedback on submission

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  reward     Reward?

  @@unique([userId, questionId])
  @@map("submissions")
}

// Rewards for correct submissions
model Reward {
  id         String   @id @default(uuid())
  amount     Float
  rank       Int? // Position in top 5 (null if not in top 5)
  percentage Float // Percentage of reward pool awarded
  createdAt  DateTime @default(now())

  // Relations
  submissionId String     @unique
  submission   Submission @relation(fields: [submissionId], references: [id])

  @@map("rewards")
}

// Transaction history
model Transaction {
  id          String          @id @default(uuid())
  type        TransactionType
  amount      Float
  description String?
  createdAt   DateTime        @default(now())

  // Relations
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  questionId String?
  question   Question? @relation("QuestionTransactions", fields: [questionId], references: [id])

  @@map("transactions")
}

enum TransactionType {
  DEPOSIT // Add codex coins to account
  WITHDRAWAL // Remove codex coins from account
  QUESTION_STAKE // Stake for creating a question
  SOLVER_STAKE // Stake for attempting a solution
  REWARD_PAYOUT // Reward received for correct solution
  CREATOR_PAYOUT // Payout to question creator
  PLATFORM_FEE // Fee collected by platform
  REFUND // Refund of stakes
}

// Platform settings (singleton)
model PlatformSettings {
  id                       Int   @id @default(1)
  defaultCreatorPercentage Float @default(10)
  defaultPlatformFee       Float @default(5)

  // Top 5 reward distribution percentages
  firstPlacePercentage  Float @default(35)
  secondPlacePercentage Float @default(20)
  thirdPlacePercentage  Float @default(10)
  fourthPlacePercentage Float @default(5)
  fifthPlacePercentage  Float @default(0)

  // Other platform settings
  minimumStakeAmount Float @default(1)

  @@map("platform_settings")
}
